SIMPLE GIT WORKFLOW

Git is a powerful tool, and it will take time to take full advantage of its
features. When starting out, however, you only need a few commands to protect
your work.

SETUP

You should use Git's command line interface. When starting your project, there
are two essential commands.

-- git init --
-- git add [-A][/fileName] --

So far, all we've done is told git to prepare to commit; nothing is persisted 
to the repository.

    - git commit -m '[Your commit message here]': takes currently staged 
    changes and stores them in the repository. -m is a flag indicating that 
    we want to write our commit message on the command line rather than in our 
    default editor. A commit message is a brief summary of the changes that 
    we're committing. Your commit message should be descriptive and written in 
    the imperative, so that someone reading your commit history (maybe you!) can 
    understand what you changed. Always start your commit messages with with a 
    capital letter, an imperative verb and leave off any trailing punctuation.

At this point, our local repository has a record of the commit, but we haven't
touched the remote repo.

    - git push: pushes our local commits to the remote repositoy. The first time 
    you run this, you need to run the command as git push -u your_alias master, 
    which will set the master branch in the remote repo your_alias as the upstream 
    tracking branch for your local branch. Once you have set this up, you will 
    be able to run git push and git will direct the push to the upstream repo. 
    To push to a particular remote, use git push remote_name branch_name 
    (for example, git push origin master).

If you are using HTTPS, you will need to authenticate with GitHub when you push; 
when using SSH, your computer and the server will use your SSH key to handle this 
for you. For this reason, it is worth setting up SSH on your dev machine. 
On App Academy machines, use HTTPS.

HOW OFTEN TO COMMIT AND PUSH

Frequently.

Pushing to GitHub is one of the most useful features we have in Git. This is 
because, ultimately, code problems are always fixable: if you can create a bug, 
you can eliminate it through debugging alone (not that you shouldn't revert to a 
previous commit if that is the best solution). Pushing to a remote does a few 
additional things:

    - Backs up your work
    - Makes your code portable
    - Gets you green squares

A good rule of thumb is to commit whenever you make something and confirm that 
it works (the second part is important; you don't want non-functional commits 
cluttering your repos). Most commits will be small; this is good, as it reduces 
the cost of reverting to a previous stage. You don't have to push every time 
you commit, but there is usually no reason not to.

REFERENCE

When you create a new GitHub repository in the browser, GitHub will provide a 
summary of the commands needed to connect it to a local repository.

For common git commands, check out the git summary {https://open.appacademy.io/learn/full-stack-online-ruby/git-summary}

Accessing this on GitHub? Use this link {https://github.com/appacademy/curriculum/blob/master/ruby/readings/git-summary.md}.
For more on writing good commit messages, check out this post by Chris Beam {http://chris.beams.io/posts/git-commit/}.
