GOALS 
    - Know what an Algo is
    - Know what a DS is.
    - Know what a tree is- know what DFS and BFS are

This class won't focus heavily on abstract algorithms: we will not become experts
in every algo under the sun. We are going to cover the baisc algorithms that will 
prove useful in your career. 

Coding up algos is a good way to practice the skills we've been learning. It 
gives you practice thinking like a programmer. Given a description of an algo, 
you shoul dbe able to translate it into Ruby code. That's our primary goal today.

TREES

Ruby provides al Array class which is a "linear" collection of elements. BUt
there are other ways to represent collections and organize data.

Trees store data in a hierarchy of layers. AN element, or node at each layer
can have links to lower level nodes. One simple exaple is a file system:

* /
    * Users
        * ruggeri
            * Desktop
            * Documents
            * Downloads
        * patel
            * Desktop
            * Downloads
    * System
        * Library

The top-level node is called the root. Each node can hold a value: here the root 
holds /. The children of a node are the nodes one level deeper. The children of 
the Users node hold ruggeri and patel. The lowest level nodes 
(the ones with no children) are called leaves.

In general, nodes can have any number of children. In the special case of binary 
trees, nodes can have at most two children. These children are called the left 
and right children.

An array and a tree are two kinds of data structures. A data structure is a 
way of storing and organizing data in a computer so that it can be used 
efficiently. Depending on how you will use the data, different data structures 
may be appropriate.

DEPTH FIRST SEARCH (DFS)

Given a tree, we may wish to enumerate all the values held by nodes in the tree. 
For instance, we may wish to go through the files/folders of the tree and print 
each one.

One common way to traverse (i.e., visit all the nodes) a tree is depth first search.
The nodes are numbered in the order that we visit them:

          1
         / \
        2   5
       /   / \
      3   6   9
     /   / \
    4   7   8

Each time, we try to visit the left child, if it exists and hasn't been visited 
yet. If it has, we try to visit the right child, if it exists and hasn't been 
visited yet. If all the children have been visited, then we move up one level 
and repeat.

Watch this animation{https://upload.wikimedia.org/wikipedia/commons/7/7f/Depth-First-Search.gif}
to see the order that you want to visit nodes in the tree.

BREADTH FIRST SEARCH (BFS)

An alternative to DFS:
          1
         / \
        2   3
       /   / \
      4   5   6
     /   / \
    7   8   9

Here we visist a node, then each of its children, then each of their children, etc.
Watch this animation{http://www.how2examples.com/artificial-intelligence/images/Breadth-First-Search.gif} 
to see the order that you want to visit nodes in the tree.

An advantage of breadth-first search is that it considers shallower nodes before
deeper ones.

ALGO

DFS and BDFS are algorithms. What's the difference between an algo and a method?
An algo i san idea, an unambiguous but unrealized process that solves a problem and 
which potentially could be written in any language. A method is the implementation, 
a conversion of an algo into Ruby code which can then be run. 

An algo can be coded in any language.